# This workflow will build and push a new container image to Amazon ECR,
# and then will deploy a new task definition to Amazon ECS, when there is a push to the "main" branch.
#
# To use this workflow, you will need to complete the following set-up steps:
#
# 1. Create an ECR repository to store your images.
#    For example: `aws ecr create-repository --repository-name my-ecr-repo --region us-east-2`.
#    Replace the value of the `ECR_REPOSITORY` environment variable in the workflow below with your repository's name.
#    Replace the value of the `AWS_REGION` environment variable in the workflow below with your repository's region.
#
# 2. Create an ECS task definition, an ECS cluster, and an ECS service.
#    For example, follow the Getting Started guide on the ECS console:
#      https://us-east-2.console.aws.amazon.com/ecs/home?region=us-east-2#/firstRun
#    Replace the value of the `ECS_SERVICE` environment variable in the workflow below with the name you set for the Amazon ECS service.
#    Replace the value of the `ECS_CLUSTER` environment variable in the workflow below with the name you set for the cluster.
#
# 3. Store your ECS task definition as a JSON file in your repository.
#    The format should follow the output of `aws ecs register-task-definition --generate-cli-skeleton`.
#    Replace the value of the `ECS_TASK_DEFINITION` environment variable in the workflow below with the path to the JSON file.
#    Replace the value of the `CONTAINER_NAME` environment variable in the workflow below with the name of the container
#    in the `containerDefinitions` section of the task definition.
#
# 4. Store an IAM user access key in GitHub Actions secrets named `AWS_ACCESS_KEY_ID` and `AWS_SECRET_ACCESS_KEY`.
#    See the documentation for each action used below for the recommended IAM policies for this IAM user,
#    and best practices on handling the access key credentials.

name: Deploy to Amazon ECS

on:
  push:
    branches: [ "deploy/test" ]
    #branches: [ "develop" ] #branches: [ "main" ]

env:
  AWS_REGION: ap-northeast-2                  # set this to your preferred AWS region, e.g. us-west-1

  # trial
  ECR_REPOSITORY: here-trillionaires/try-and-review/trial        # set this to your Amazon ECR repository name
  ECS_SERVICE: trial-service                 # set this to your Amazon ECS service name
  ECS_CLUSTER: trial-cluster                # set this to your Amazon ECS cluster name
  ECS_TASK_DEFINITION: .github/workflows/trial-task-revision1.json # set this to the path to your Amazon ECS task definition
  # file, e.g. .aws/task-definition.json
  CONTAINER_NAME: tiral-container           # set this to the name of the container in the
  # containerDefinitions section of your task definition
  TRIAL_WD: ./com.trillionares.tryit.trial

  # Product
  PRODUCT_ECR_REPOSITORY: here-trillionaires/try-and-review/product      # set this to your Amazon ECR repository name
  PRODUCT_ECS_SERVICE: product-service                 # set this to your Amazon ECS service name
  PRODUCT_ECS_CLUSTER: product-cluster                # set this to your Amazon ECS cluster name
  PRODUCT_ECS_TASK_DEFINITION: .github/workflows/product-task-revision1.json # set this to the path to your Amazon ECS task definition
  # file, e.g. .aws/task-definition.json
  PRODUCT_CONTAINER_NAME: product-container           # set this to the name of the container in the
  # containerDefinitions section of your task definition
  PRODUCT_WD: ./com.trillionares.tryit.product

  # Image-manage
  IMAGE_MANAGE_ECR_REPOSITORY: here-trillionaires/try-and-review/image-manage      # set this to your Amazon ECR repository name
  IMAGE_MANAGE_ECS_SERVICE: image-manage-service                 # set this to your Amazon ECS service name
  IMAGE_MANAGE_ECS_CLUSTER: image-manage-cluster                # set this to your Amazon ECS cluster name
  IMAGE_MANAGE_ECS_TASK_DEFINITION: .github/workflows/image-manage-task-revision1.json # set this to the path to your Amazon ECS task definition
  # file, e.g. .aws/task-definition.json
  IMAGE_MANAGE_CONTAINER_NAME: image-manage-container           # set this to the name of the container in the
  # containerDefinitions section of your task definition
  IMAGE_MANAGE_WD: ./com.trillionares.tryit.image-manage

permissions:
  contents: read

jobs: #stages
  build:
    name: Build Jar
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'

      # trial
      - name: Grant execute permission for trial gradlew
        run: chmod +x gradlew
        working-directory: ${{ env.TRIAL_WD }}

      #- name: Build with trial Gradle
      - name: Build with Test without trial Gradle
        #run: ./gradlew clean build
        run: ./gradlew clean build -x test
        working-directory: ${{ env.TRIAL_WD }}

      - name: Upload trial Build Artifacts
        uses: actions/upload-artifact@v3
        with:
          name: trial-build-libs
          path: ${{ env.TRIAL_WD }}/build/libs/*.jar

      # product
      - name: Grant execute permission for product gradlew
        run: chmod +x gradlew
        working-directory: ${{ env.PRODUCT_WD }}

      #- name: Build with product Gradle
      - name: Build with Test without product Gradle
        #run: ./gradlew clean build
        run: ./gradlew clean build -x test
        working-directory: ${{ env.PRODUCT_WD }}

      - name: Upload product Build Artifacts
        uses: actions/upload-artifact@v3
        with:
          name: product-build-libs
          path: ${{ env.PRODUCT_WD }}/build/libs/*.jar

      # image-manage
      - name: Grant execute permission for image-manage gradlew
        run: chmod +x gradlew
        working-directory: ${{ env.IMAGE_MANAGE_WD }}

      #- name: Build with image-manage Gradle
      - name: Build with Test without image-manage Gradle
        #run: ./gradlew clean build
        run: ./gradlew clean build -x test
        working-directory: ${{ env.IMAGE_MANAGE_WD }}

      - name: Upload image-manage Build Artifacts
        uses: actions/upload-artifact@v3
        with:
          name: image-manage-build-libs
          path: ${{ env.IMAGE_MANAGE_WD }}/build/libs/*.jar


  deploy:
    name: Deploy
    runs-on: ubuntu-latest
    needs: build
    environment: production

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      # Service Down load ---------------------------------------------------
      # Trial
      - name: Download trial Build Artifacts
        uses: actions/download-artifact@v3
        with:
          name: trial-build-libs
          path: ${{ env.TRIAL_WD }}/build/libs

      # Product
      - name: Download product Build Artifacts
        uses: actions/download-artifact@v3
        with:
          name: product-build-libs
          path: ${{ env.PRODUCT_WD }}/build/libs

      # Image-manage
      - name: Download image-manage Build Artifacts
        uses: actions/download-artifact@v3
        with:
          name: image-manage-build-libs
          path: ${{ env.IMAGE_MANAGE_WD }}/build/libs

      # ------------------------------------------------------------------------
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      # Docker BUILD--------------------------------------------------------------
      # Trial
      - name: Trial - Build, tag, and push image to Amazon ECR
        id: trial-build-image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          IMAGE_TAG: ${{ github.sha }}
        run: |
          # Build a docker container and
          # push it to ECR so that it can
          # be deployed to ECS.
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG ${{ env.TRIAL_WD }}
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          echo "image=$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG" >> $GITHUB_OUTPUT

      - name: Fill in the new trial image ID in the Amazon ECS task definition
        id: trial-task-def
        uses: aws-actions/amazon-ecs-render-task-definition@v1
        with:
          task-definition: ${{ env.ECS_TASK_DEFINITION }}
          container-name: ${{ env.CONTAINER_NAME }}
          image: ${{ steps.trial-build-image.outputs.image }}
          environment-variables: |
            EUREKA_DNS_NAME=${{ secrets.EUREKA_DNS_NAME }}
            CONFIG_DNS_NAME=${{ secrets.CONFIG_DNS_NAME }}
            GATEWAY_DNS_NAME=${{ secrets.GATEWAY_DNS_NAME }}
            AUTH_DNS_NAME=${{ secrets.AUTH_DNS_NAME }}
            TRIAL_DNS_NAME=${{ secrets.TRIAL_DNS_NAME }}
            PRODUCT_DNS_NAME=${{ secrets.PRODUCT_DNS_NAME }}
            REVIEW_DNS_NAME=${{ secrets.REVIEW_DNS_NAME }}
            NOTIFICATION_DNS_NAME=${{ secrets.NOTIFICATION_DNS_NAME }}
            STATISTICS_DNS_NAME=${{ secrets.STATISTICS_DNS_NAME }}
            IMAGE_MANAGE_DNS_NAME=${{ secrets.IMAGE_MANAGE_DNS_NAME }}
            DB_URL=${{ secrets.DB_URL }}
            DB_RECRUITMENT_USERNAME=${{ secrets.DB_RECRUITMENT_USERNAME }}
            DB_RECRUITMENT_PASSWORD=${{ secrets.DB_RECRUITMENT_PASSWORD }}
            RECRUITMENT_REDIS_HOST=${{ secrets.RECRUITMENT_REDIS_HOST }}
            RECRUITMENT_REDIS_PORT=${{ secrets.RECRUITMENT_REDIS_PORT }}
            REDIS_USERNAME=${{ secrets.REDIS_USERNAME }}
            REDIS_PASSWORD=${{ secrets.REDIS_PASSWORD }}
            KAFKA_DNS_URL=${{ secrets.KAFKA_DNS_URL }}

      - name: Deploy trial Amazon ECS task definition
        uses: aws-actions/amazon-ecs-deploy-task-definition@v2
        with:
          task-definition: ${{ steps.trial-task-def.outputs.task-definition }}
          service: ${{ env.ECS_SERVICE }}
          cluster: ${{ env.ECS_CLUSTER }}
          wait-for-service-stability: true

      # Product
      - name: Product - Build, tag, and push server image to Amazon ECR
        id: product-build-image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          IMAGE_TAG: ${{ github.sha }}
        run: |
          docker build -t $ECR_REGISTRY/${{ env.PRODUCT_ECR_REPOSITORY }}:${{ github.sha }} ${{ env.PRODUCT_WD }}
          docker push $ECR_REGISTRY/${{ env.PRODUCT_ECR_REPOSITORY }}:${{ github.sha }}
          echo "image=$ECR_REGISTRY/${{ env.PRODUCT_ECR_REPOSITORY }}:${{ github.sha }}" >> $GITHUB_OUTPUT

      - name: Fill in the new product image ID in the Amazon ECS task definition
        id: product-task-def
        uses: aws-actions/amazon-ecs-render-task-definition@v1
        with:
          task-definition: ${{ env.PRODUCT_ECS_TASK_DEFINITION }}
          container-name: ${{ env.PRODUCT_CONTAINER_NAME }}
          image: ${{ steps.product-build-image.outputs.image }}
          environment-variables: |
            EUREKA_DNS_NAME=${{ secrets.EUREKA_DNS_NAME }}
            CONFIG_DNS_NAME=${{ secrets.CONFIG_DNS_NAME }}
            GATEWAY_DNS_NAME=${{ secrets.GATEWAY_DNS_NAME }}
            AUTH_DNS_NAME=${{ secrets.AUTH_DNS_NAME }}
            TRIAL_DNS_NAME=${{ secrets.TRIAL_DNS_NAME }}
            PRODUCT_DNS_NAME=${{ secrets.PRODUCT_DNS_NAME }}
            REVIEW_DNS_NAME=${{ secrets.REVIEW_DNS_NAME }}
            NOTIFICATION_DNS_NAME=${{ secrets.NOTIFICATION_DNS_NAME }}
            STATISTICS_DNS_NAME=${{ secrets.STATISTICS_DNS_NAME }}
            IMAGE_MANAGE_DNS_NAME=${{ secrets.IMAGE_MANAGE_DNS_NAME }}
            DB_URL=${{ secrets.DB_URL }}
            DB_PRODUCT_USERNAME=${{ secrets.DB_PRODUCT_USERNAME }}
            DB_PRODUCT_PASSWORD=${{ secrets.DB_PRODUCT_PASSWORD }}
            PRODUCT_REDIS_HOST=${{ secrets.PRODUCT_REDIS_HOST }}
            PRODUCT_REDIS_PORT=${{ secrets.PRODUCT_REDIS_PORT }}
            REDIS_USERNAME=${{ secrets.REDIS_USERNAME }}
            REDIS_PASSWORD=${{ secrets.REDIS_PASSWORD }}
            ZIPKIN_URL=${{ secrets.ZIPKIN_URL }}
            KAFKA_DNS_URL=${{ secrets.KAFKA_DNS_URL }}

      - name: Deploy product Amazon ECS task definition
        uses: aws-actions/amazon-ecs-deploy-task-definition@v2
        with:
          task-definition: ${{ steps.product-task-def.outputs.task-definition }}
          service: ${{ env.PRODUCT_ECS_SERVICE }}
          cluster: ${{ env.PRODUCT_ECS_CLUSTER }}
          wait-for-service-stability: true

      # Image-manage
      - name: Image-manage - Build, tag, and push server image to Amazon ECR
        id: image-manage-build-image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          IMAGE_TAG: ${{ github.sha }}
        run: |
          docker build -t $ECR_REGISTRY/${{ env.IMAGE_MANAGE_ECR_REPOSITORY }}:${{ github.sha }} ${{ env.IMAGE_MANAGE_WD }}
          docker push $ECR_REGISTRY/${{ env.IMAGE_MANAGE_ECR_REPOSITORY }}:${{ github.sha }}
          echo "image=$ECR_REGISTRY/${{ env.IMAGE_MANAGE_ECR_REPOSITORY }}:${{ github.sha }}" >> $GITHUB_OUTPUT

      - name: Fill in the new image-manage image ID in the Amazon ECS task definition
        id: image-manage-task-def
        uses: aws-actions/amazon-ecs-render-task-definition@v1
        with:
          task-definition: ${{ env.IMAGE_MANAGE_ECS_TASK_DEFINITION }}
          container-name: ${{ env.IMAGE_MANAGE_CONTAINER_NAME }}
          image: ${{ steps.image-manage-build-image.outputs.image }}
          environment-variables: |
            EUREKA_DNS_NAME=${{ secrets.EUREKA_DNS_NAME }}
            CONFIG_DNS_NAME=${{ secrets.CONFIG_DNS_NAME }}
            GATEWAY_DNS_NAME=${{ secrets.GATEWAY_DNS_NAME }}
            AUTH_DNS_NAME=${{ secrets.AUTH_DNS_NAME }}
            TRIAL_DNS_NAME=${{ secrets.TRIAL_DNS_NAME }}
            PRODUCT_DNS_NAME=${{ secrets.PRODUCT_DNS_NAME }}
            REVIEW_DNS_NAME=${{ secrets.REVIEW_DNS_NAME }}
            NOTIFICATION_DNS_NAME=${{ secrets.NOTIFICATION_DNS_NAME }}
            STATISTICS_DNS_NAME=${{ secrets.STATISTICS_DNS_NAME }}
            IMAGE_MANAGE_DNS_NAME=${{ secrets.IMAGE_MANAGE_DNS_NAME }}
            DB_URL=${{ secrets.DB_URL }}
            DB_PRODUCT_USERNAME=${{ secrets.DB_PRODUCT_USERNAME }}
            DB_PRODUCT_PASSWORD=${{ secrets.DB_PRODUCT_PASSWORD }}
            AWS_S3_BUCKET_NAME=${{ secrets.AWS_S3_BUCKET_NAME }}
            AWS_S3_REGION=${{ secrets.AWS_S3_REGION }}
            AWS_S3_ACCESS_KEY=${{ secrets.AWS_S3_ACCESS_KEY }}
            AWS_S3_SECRET_KEY=${{ secrets.AWS_S3_SECRET_KEY }}
            ZIPKIN_URL=${{ secrets.ZIPKIN_URL }}
            KAFKA_DNS_URL=${{ secrets.KAFKA_DNS_URL }}

      - name: Deploy image-manage Amazon ECS task definition
        uses: aws-actions/amazon-ecs-deploy-task-definition@v2
        with:
          task-definition: ${{ steps.image-manage-task-def.outputs.task-definition }}
          service: ${{ env.IMAGE_MANAGE_ECS_SERVICE }}
          cluster: ${{ env.IMAGE_MANAGE_ECS_CLUSTER }}
          wait-for-service-stability: true

