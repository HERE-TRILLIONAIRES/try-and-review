# This workflow will build and push a new container image to Amazon ECR,
# and then will deploy a new task definition to Amazon ECS, when there is a push to the "main" branch.
#
# To use this workflow, you will need to complete the following set-up steps:
#
# 1. Create an ECR repository to store your images.
#    For example: `aws ecr create-repository --repository-name my-ecr-repo --region us-east-2`.
#    Replace the value of the `ECR_REPOSITORY` environment variable in the workflow below with your repository's name.
#    Replace the value of the `AWS_REGION` environment variable in the workflow below with your repository's region.
#
# 2. Create an ECS task definition, an ECS cluster, and an ECS service.
#    For example, follow the Getting Started guide on the ECS console:
#      https://us-east-2.console.aws.amazon.com/ecs/home?region=us-east-2#/firstRun
#    Replace the value of the `ECS_SERVICE` environment variable in the workflow below with the name you set for the Amazon ECS service.
#    Replace the value of the `ECS_CLUSTER` environment variable in the workflow below with the name you set for the cluster.
#
# 3. Store your ECS task definition as a JSON file in your repository.
#    The format should follow the output of `aws ecs register-task-definition --generate-cli-skeleton`.
#    Replace the value of the `ECS_TASK_DEFINITION` environment variable in the workflow below with the path to the JSON file.
#    Replace the value of the `CONTAINER_NAME` environment variable in the workflow below with the name of the container
#    in the `containerDefinitions` section of the task definition.
#
# 4. Store an IAM user access key in GitHub Actions secrets named `AWS_ACCESS_KEY_ID` and `AWS_SECRET_ACCESS_KEY`.
#    See the documentation for each action used below for the recommended IAM policies for this IAM user,
#    and best practices on handling the access key credentials.

name: Deploy to Amazon ECS

on:
  push:
    branches: [ "develop" ]
    #branches: [ "develop" ] #branches: [ "main" ]

env:
  AWS_REGION: ap-northeast-2                  # set this to your preferred AWS region, e.g. us-west-1

  # Auth
  AUTH_ECR_REPOSITORY: here-trillionaires/try-and-review/auth      # set this to your Amazon ECR repository name
  AUTH_ECS_SERVICE: auth-service                 # set this to your Amazon ECS service name
  AUTH_ECS_CLUSTER: auth-cluster                # set this to your Amazon ECS cluster name
  AUTH_ECS_TASK_DEFINITION: .github/workflows/auth-task-revision1.json # set this to the path to your Amazon ECS task definition
                                               # file, e.g. .aws/task-definition.json
  AUTH_CONTAINER_NAME: auth-container           # set this to the name of the container in the
                                               # containerDefinitions section of your task definition
  AUTH_WD: ./com.trillionares.tryit.auth
  
  # trial
  ECR_REPOSITORY: here-trillionaires/try-and-review/trial        # set this to your Amazon ECR repository name
  ECS_SERVICE: trial-service                 # set this to your Amazon ECS service name
  ECS_CLUSTER: trial-cluster                # set this to your Amazon ECS cluster name
  ECS_TASK_DEFINITION: .github/workflows/trial-task-revision1.json # set this to the path to your Amazon ECS task definition
                                               # file, e.g. .aws/task-definition.json
  CONTAINER_NAME: tiral-container           # set this to the name of the container in the
                                               # containerDefinitions section of your task definition
  TRIAL_WD: ./com.trillionares.tryit.trial

  # Product
  PRODUCT_ECR_REPOSITORY: here-trillionaires/try-and-review/product      # set this to your Amazon ECR repository name
  PRODUCT_ECS_SERVICE: product-service                 # set this to your Amazon ECS service name
  PRODUCT_ECS_CLUSTER: product-cluster                # set this to your Amazon ECS cluster name
  PRODUCT_ECS_TASK_DEFINITION: .github/workflows/product-task-revision1.json # set this to the path to your Amazon ECS task definition
                                               # file, e.g. .aws/task-definition.json
  PRODUCT_CONTAINER_NAME: product-container           # set this to the name of the container in the
                                               # containerDefinitions section of your task definition
  PRODUCT_WD: ./com.trillionares.tryit.product

  # Review
  REVIEW_ECR_REPOSITORY: here-trillionaires/try-and-review/review      # set this to your Amazon ECR repository name
  REVIEW_ECS_SERVICE: review-service                 # set this to your Amazon ECS service name
  REVIEW_ECS_CLUSTER: review-cluster                # set this to your Amazon ECS cluster name
  REVIEW_ECS_TASK_DEFINITION: .github/workflows/review-task-revision1.json # set this to the path to your Amazon ECS task definition
                                               # file, e.g. .aws/task-definition.json
  REVIEW_CONTAINER_NAME: review-container           # set this to the name of the container in the
                                               # containerDefinitions section of your task definition
  REVIEW_WD: ./com.trillionares.tryit.review

  # Notification
  NOTIFICATION_ECR_REPOSITORY: here-trillionaires/try-and-review/notification      # set this to your Amazon ECR repository name
  NOTIFICATION_ECS_SERVICE: notification-service                 # set this to your Amazon ECS service name
  NOTIFICATION_ECS_CLUSTER: notification-cluster                # set this to your Amazon ECS cluster name
  NOTIFICATION_ECS_TASK_DEFINITION: .github/workflows/notification-task-revision1.json # set this to the path to your Amazon ECS task definition
                                               # file, e.g. .aws/task-definition.json
  NOTIFICATION_CONTAINER_NAME: notification-container           # set this to the name of the container in the
                                               # containerDefinitions section of your task definition
  NOTIFICATION_WD: ./com.trillionares.tryit.notification

  # Statistics
  STATISTICS_ECR_REPOSITORY: here-trillionaires/try-and-review/statistics      # set this to your Amazon ECR repository name
  STATISTICS_ECS_SERVICE: statistics-service                 # set this to your Amazon ECS service name
  STATISTICS_ECS_CLUSTER: statistics-cluster                # set this to your Amazon ECS cluster name
  STATISTICS_ECS_TASK_DEFINITION: .github/workflows/statistics-task-revision1.json # set this to the path to your Amazon ECS task definition
                                               # file, e.g. .aws/task-definition.json
  STATISTICS_CONTAINER_NAME: statistics-container           # set this to the name of the container in the
                                               # containerDefinitions section of your task definition
  STATISTICS_WD: ./com.trillionares.tryit.statistics

  # Image-manage
  IMAGE_MANAGE_ECR_REPOSITORY: here-trillionaires/try-and-review/image-manage      # set this to your Amazon ECR repository name
  IMAGE_MANAGE_ECS_SERVICE: image-manage-service                 # set this to your Amazon ECS service name
  IMAGE_MANAGE_ECS_CLUSTER: image-manage-cluster                # set this to your Amazon ECS cluster name
  IMAGE_MANAGE_ECS_TASK_DEFINITION: .github/workflows/image-manage-task-revision1.json # set this to the path to your Amazon ECS task definition
                                               # file, e.g. .aws/task-definition.json
  IMAGE_MANAGE_CONTAINER_NAME: image-manage-container           # set this to the name of the container in the
                                               # containerDefinitions section of your task definition
  IMAGE_MANAGE_WD: ./com.trillionares.tryit.image-manage
  
  # config
  CONFIG_ECR_REPOSITORY: here-trillionaires/try-and-review/config      # set this to your Amazon ECR repository name
  CONFIG_ECS_SERVICE: config-service                 # set this to your Amazon ECS service name
  CONFIG_ECS_CLUSTER: config-cluster                # set this to your Amazon ECS cluster name
  CONFIG_ECS_TASK_DEFINITION: .github/workflows/config-task-revision1.json # set this to the path to your Amazon ECS task definition
                                               # file, e.g. .aws/task-definition.json
  CONFIG_CONTAINER_NAME: config-container           # set this to the name of the container in the
                                               # containerDefinitions section of your task definition
  CONFIG_WD: ./com.trillionares.tryit.config

  # server
  SERVER_ECR_REPOSITORY: here-trillionaires/try-and-review/server      # set this to your Amazon ECR repository name
  SERVER_ECS_SERVICE: server-service                 # set this to your Amazon ECS service name
  SERVER_ECS_CLUSTER: server-cluster                # set this to your Amazon ECS cluster name
  SERVER_ECS_TASK_DEFINITION: .github/workflows/server-task-revision1.json # set this to the path to your Amazon ECS task definition
                                               # file, e.g. .aws/task-definition.json
  SERVER_CONTAINER_NAME: server-container           # set this to the name of the container in the
                                               # containerDefinitions section of your task definition
  SERVER_WD: ./com.trillionares.tryit.server
                                               
  # Gateway
  GATEWAY_ECR_REPOSITORY: here-trillionaires/try-and-review/gateway      # set this to your Amazon ECR repository name
  GATEWAY_ECS_SERVICE: gateway-service                 # set this to your Amazon ECS service name
  GATEWAY_ECS_CLUSTER: gateway-cluster                # set this to your Amazon ECS cluster name
  GATEWAY_ECS_TASK_DEFINITION: .github/workflows/gateway-task-revision1.json # set this to the path to your Amazon ECS task definition
                                               # file, e.g. .aws/task-definition.json
  GATEWAY_CONTAINER_NAME: gateway-container           # set this to the name of the container in the
                                               # containerDefinitions section of your task definition
  GATEWAY_WD: ./com.trillionares.tryit.gateway

permissions:
  contents: read

jobs: #stages
  build:
    name: Build Jar
    runs-on: ubuntu-latest

    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Set up JDK 17
      uses: actions/setup-java@v3
      with:
        java-version: '17'
        distribution: 'temurin'

    # server
    - name: Grant execute permission for server gradlew
      run: chmod +x gradlew
      working-directory: ${{ env.SERVER_WD }}

    #- name: Build with server Gradle
    - name: Build with Test without server Gradle
      #run: ./gradlew clean build
      run: ./gradlew clean build -x test
      working-directory: ${{ env.SERVER_WD }}

    - name: Upload server Build Artifacts
      uses: actions/upload-artifact@v3
      with:
        name: server-build-libs
        path: ${{ env.SERVER_WD }}/build/libs/*.jar

    # config
    - name: Grant execute permission for config gradlew
      run: chmod +x gradlew
      working-directory: ${{ env.CONFIG_WD }}

    #- name: Build with config Gradle
    - name: Build with Test without config Gradle
      #run: ./gradlew clean build
      run: ./gradlew clean build -x test
      working-directory: ${{ env.CONFIG_WD }}

    - name: Upload config Build Artifacts
      uses: actions/upload-artifact@v3
      with:
        name: config-build-libs
        path: ${{ env.CONFIG_WD }}/build/libs/*.jar

    # gateway
    - name: Grant execute permission for gateway gradlew
      run: chmod +x gradlew
      working-directory: ${{ env.GATEWAY_WD }}

    #- name: Build with gateway Gradle
    - name: Build with Test without gateway Gradle
      #run: ./gradlew clean build
      run: ./gradlew clean build -x test
      working-directory: ${{ env.GATEWAY_WD }}

    - name: Upload gateway Build Artifacts
      uses: actions/upload-artifact@v3
      with:
        name: gateway-build-libs
        path: ${{ env.GATEWAY_WD }}/build/libs/*.jar

    # auth
    - name: Grant execute permission for auth gradlew
      run: chmod +x gradlew
      working-directory: ${{ env.AUTH_WD }}

    #- name: Build with auth Gradle
    - name: Build with Test without auth Gradle
      #run: ./gradlew clean build
      run: ./gradlew clean build -x test
      working-directory: ${{ env.AUTH_WD }}

    - name: Upload auth Build Artifacts
      uses: actions/upload-artifact@v3
      with:
        name: auth-build-libs
        path: ${{ env.AUTH_WD }}/build/libs/*.jar
        
    # trial
    - name: Grant execute permission for trial gradlew
      run: chmod +x gradlew
      working-directory: ${{ env.TRIAL_WD }}

    #- name: Build with trial Gradle
    - name: Build with Test without trial Gradle
      #run: ./gradlew clean build
      run: ./gradlew clean build -x test
      working-directory: ${{ env.TRIAL_WD }}

    - name: Upload trial Build Artifacts
      uses: actions/upload-artifact@v3
      with:
        name: trial-build-libs
        path: ${{ env.TRIAL_WD }}/build/libs/*.jar

    # product
    - name: Grant execute permission for product gradlew
      run: chmod +x gradlew
      working-directory: ${{ env.PRODUCT_WD }}

    #- name: Build with product Gradle
    - name: Build with Test without product Gradle
      #run: ./gradlew clean build
      run: ./gradlew clean build -x test
      working-directory: ${{ env.PRODUCT_WD }}

    - name: Upload product Build Artifacts
      uses: actions/upload-artifact@v3
      with:
        name: product-build-libs
        path: ${{ env.PRODUCT_WD }}/build/libs/*.jar

    # review
    - name: Grant execute permission for review gradlew
      run: chmod +x gradlew
      working-directory: ${{ env.REVIEW_WD }}

    #- name: Build with review Gradle
    - name: Build with Test without review Gradle
      #run: ./gradlew clean build
      run: ./gradlew clean build -x test
      working-directory: ${{ env.REVIEW_WD }}

    - name: Upload review Build Artifacts
      uses: actions/upload-artifact@v3
      with:
        name: review-build-libs
        path: ${{ env.REVIEW_WD }}/build/libs/*.jar

    # notification
    - name: Grant execute permission for notification gradlew
      run: chmod +x gradlew
      working-directory: ${{ env.NOTIFICATION_WD }}

    #- name: Build with notification Gradle
    - name: Build with Test without notification Gradle
      #run: ./gradlew clean build
      run: ./gradlew clean build -x test
      working-directory: ${{ env.NOTIFICATION_WD }}

    - name: Upload notification Build Artifacts
      uses: actions/upload-artifact@v3
      with:
        name: notification-build-libs
        path: ${{ env.NOTIFICATION_WD }}/build/libs/*.jar

    # statistics
    - name: Grant execute permission for statistics gradlew
      run: chmod +x gradlew
      working-directory: ${{ env.STATISTICS_WD }}

    #- name: Build with statistics Gradle
    - name: Build with Test without statistics Gradle
      #run: ./gradlew clean build
      run: ./gradlew clean build -x test
      working-directory: ${{ env.STATISTICS_WD }}

    - name: Upload statistics Build Artifacts
      uses: actions/upload-artifact@v3
      with:
        name: statistics-build-libs
        path: ${{ env.STATISTICS_WD }}/build/libs/*.jar

    # image-manage
    - name: Grant execute permission for image-manage gradlew
      run: chmod +x gradlew
      working-directory: ${{ env.IMAGE_MANAGE_WD }}

    #- name: Build with image-manage Gradle
    - name: Build with Test without image-manage Gradle
      #run: ./gradlew clean build
      run: ./gradlew clean build -x test
      working-directory: ${{ env.IMAGE_MANAGE_WD }}

    - name: Upload image-manage Build Artifacts
      uses: actions/upload-artifact@v3
      with:
        name: image-manage-build-libs
        path: ${{ env.IMAGE_MANAGE_WD }}/build/libs/*.jar

        
  deploy:
    name: Deploy
    runs-on: ubuntu-latest
    needs: build
    environment: production

    steps:
    - name: Checkout
      uses: actions/checkout@v4

    # Service Down load ---------------------------------------------------
    # Server
    - name: Download server Build Artifacts
      uses: actions/download-artifact@v3
      with:
        name: server-build-libs
        path: ${{ env.SERVER_WD }}/build/libs

    # Config
    - name: Download config Build Artifacts
      uses: actions/download-artifact@v3
      with:
        name: config-build-libs
        path: ${{ env.CONFIG_WD }}/build/libs

    # Gateway
    - name: Download gateway Build Artifacts
      uses: actions/download-artifact@v3
      with:
        name: gateway-build-libs
        path: ${{ env.GATEWAY_WD }}/build/libs

    # Auth
    - name: Download auth Build Artifacts
      uses: actions/download-artifact@v3
      with:
        name: auth-build-libs
        path: ${{ env.AUTH_WD }}/build/libs

    # Trial
    - name: Download trial Build Artifacts
      uses: actions/download-artifact@v3
      with:
        name: trial-build-libs
        path: ${{ env.TRIAL_WD }}/build/libs

    # Product
    - name: Download product Build Artifacts
      uses: actions/download-artifact@v3
      with:
        name: product-build-libs
        path: ${{ env.PRODUCT_WD }}/build/libs

    # Review
    - name: Download review Build Artifacts
      uses: actions/download-artifact@v3
      with:
        name: review-build-libs
        path: ${{ env.REVIEW_WD }}/build/libs

    # Notification
    - name: Download notification Build Artifacts
      uses: actions/download-artifact@v3
      with:
        name: notification-build-libs
        path: ${{ env.NOTIFICATION_WD }}/build/libs

    # Statistics
    - name: Download statistics Build Artifacts
      uses: actions/download-artifact@v3
      with:
        name: statistics-build-libs
        path: ${{ env.STATISTICS_WD }}/build/libs

    # Image-manage
    - name: Download image-manage Build Artifacts
      uses: actions/download-artifact@v3
      with:
        name: image-manage-build-libs
        path: ${{ env.IMAGE_MANAGE_WD }}/build/libs

    # ------------------------------------------------------------------------
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v1

    # Docker BUILD--------------------------------------------------------------
    # Server
    - name: Server - Build, tag, and push server image to Amazon ECR
      id: server-build-image
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        IMAGE_TAG: ${{ github.sha }}
      run: |
        docker build -t $ECR_REGISTRY/${{ env.SERVER_ECR_REPOSITORY }}:${{ github.sha }} ${{ env.SERVER_WD }}
        docker push $ECR_REGISTRY/${{ env.SERVER_ECR_REPOSITORY }}:${{ github.sha }}
        echo "image=$ECR_REGISTRY/${{ env.SERVER_ECR_REPOSITORY }}:${{ github.sha }}" >> $GITHUB_OUTPUT

    - name: Fill in the new server image ID in the Amazon ECS task definition
      id: server-task-def
      uses: aws-actions/amazon-ecs-render-task-definition@v1
      with:
        task-definition: ${{ env.SERVER_ECS_TASK_DEFINITION }}
        container-name: ${{ env.SERVER_CONTAINER_NAME }}
        image: ${{ steps.server-build-image.outputs.image }}
        
    - name: Deploy server Amazon ECS task definition
      uses: aws-actions/amazon-ecs-deploy-task-definition@v2
      with:
        task-definition: ${{ steps.server-task-def.outputs.task-definition }}
        service: ${{ env.SERVER_ECS_SERVICE }}
        cluster: ${{ env.SERVER_ECS_CLUSTER }}
        wait-for-service-stability: true

    # Config
    - name: Config - Build, tag, and push server image to Amazon ECR
      id: config-build-image
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        IMAGE_TAG: ${{ github.sha }}
      run: |
        docker build -t $ECR_REGISTRY/${{ env.CONFIG_ECR_REPOSITORY }}:${{ github.sha }} ${{ env.CONFIG_WD }}
        docker push $ECR_REGISTRY/${{ env.CONFIG_ECR_REPOSITORY }}:${{ github.sha }}
        echo "image=$ECR_REGISTRY/${{ env.CONFIG_ECR_REPOSITORY }}:${{ github.sha }}" >> $GITHUB_OUTPUT

    - name: Fill in the new config image ID in the Amazon ECS task definition
      id: config-task-def
      uses: aws-actions/amazon-ecs-render-task-definition@v1
      with:
        task-definition: ${{ env.CONFIG_ECS_TASK_DEFINITION }}
        container-name: ${{ env.CONFIG_CONTAINER_NAME }}
        image: ${{ steps.config-build-image.outputs.image }}
        environment-variables: |
          EUREKA_DNS_NAME=${{ secrets.EUREKA_DNS_NAME }}
          CONFIG_DNS_NAME=${{ secrets.CONFIG_DNS_NAME }}
          GATEWAY_DNS_NAME=${{ secrets.GATEWAY_DNS_NAME }}
          AUTH_DNS_NAME=${{ secrets.AUTH_DNS_NAME }}
          TRIAL_DNS_NAME=${{ secrets.TRIAL_DNS_NAME }}
          PRODUCT_DNS_NAME=${{ secrets.PRODUCT_DNS_NAME }}
          REVIEW_DNS_NAME=${{ secrets.REVIEW_DNS_NAME }}
          NOTIFICATION_DNS_NAME=${{ secrets.NOTIFICATION_DNS_NAME }}
          STATISTICS_DNS_NAME=${{ secrets.STATISTICS_DNS_NAME }}
          IMAGE_MANAGE_DNS_NAME=${{ secrets.IMAGE_MANAGE_DNS_NAME }}
          ZIPKIN_URL=${{ secrets.ZIPKIN_URL }}
          DB_URL=${{ secrets.DB_URL }}
          DB_NOTIFICATION_USERNAME=${{ secrets.DB_NOTIFICATION_USERNAME }}
          DB_NOTIFICATION_PASSWORD=${{ secrets.DB_NOTIFICATION_PASSWORD }}
          SLACK_WEBHOOK_URL=${{ secrets.SLACK_WEBHOOK_URL }}
          KAFKA_DNS_URL=${{ secrets.KAFKA_DNS_URL }}
        
    - name: Deploy config Amazon ECS task definition
      uses: aws-actions/amazon-ecs-deploy-task-definition@v2
      with:
        task-definition: ${{ steps.config-task-def.outputs.task-definition }}
        service: ${{ env.CONFIG_ECS_SERVICE }}
        cluster: ${{ env.CONFIG_ECS_CLUSTER }}
        wait-for-service-stability: true

    # Gateway
    - name: Gateway - Build, tag, and push server image to Amazon ECR
      id: gateway-build-image
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        IMAGE_TAG: ${{ github.sha }}
      run: |
        docker build -t $ECR_REGISTRY/${{ env.GATEWAY_ECR_REPOSITORY }}:${{ github.sha }} ${{ env.GATEWAY_WD }}
        docker push $ECR_REGISTRY/${{ env.GATEWAY_ECR_REPOSITORY }}:${{ github.sha }}
        echo "image=$ECR_REGISTRY/${{ env.GATEWAY_ECR_REPOSITORY }}:${{ github.sha }}" >> $GITHUB_OUTPUT

    - name: Fill in the new gateway image ID in the Amazon ECS task definition
      id: gateway-task-def
      uses: aws-actions/amazon-ecs-render-task-definition@v1
      with:
        task-definition: ${{ env.GATEWAY_ECS_TASK_DEFINITION }}
        container-name: ${{ env.GATEWAY_CONTAINER_NAME }}
        image: ${{ steps.gateway-build-image.outputs.image }}
        environment-variables: |
          EUREKA_DNS_NAME=${{ secrets.EUREKA_DNS_NAME }}
          CONFIG_DNS_NAME=${{ secrets.CONFIG_DNS_NAME }}
          GATEWAY_DNS_NAME=${{ secrets.GATEWAY_DNS_NAME }}
          AUTH_DNS_NAME=${{ secrets.AUTH_DNS_NAME }}
          TRIAL_DNS_NAME=${{ secrets.TRIAL_DNS_NAME }}
          PRODUCT_DNS_NAME=${{ secrets.PRODUCT_DNS_NAME }}
          REVIEW_DNS_NAME=${{ secrets.REVIEW_DNS_NAME }}
          NOTIFICATION_DNS_NAME=${{ secrets.NOTIFICATION_DNS_NAME }}
          STATISTICS_DNS_NAME=${{ secrets.STATISTICS_DNS_NAME }}
          IMAGE_MANAGE_DNS_NAME=${{ secrets.IMAGE_MANAGE_DNS_NAME }}
          SECRET_KEY=${{ secrets.SECRET_KEY }}
          KAFKA_DNS_URL=${{ secrets.KAFKA_DNS_URL }}
        
    - name: Deploy gateway Amazon ECS task definition
      uses: aws-actions/amazon-ecs-deploy-task-definition@v2
      with:
        task-definition: ${{ steps.gateway-task-def.outputs.task-definition }}
        service: ${{ env.GATEWAY_ECS_SERVICE }}
        cluster: ${{ env.GATEWAY_ECS_CLUSTER }}
        wait-for-service-stability: true

    # Auth
    - name: Auth - Build, tag, and push server image to Amazon ECR
      id: auth-build-image
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        IMAGE_TAG: ${{ github.sha }}
      run: |
        docker build -t $ECR_REGISTRY/${{ env.AUTH_ECR_REPOSITORY }}:${{ github.sha }} ${{ env.AUTH_WD }}
        docker push $ECR_REGISTRY/${{ env.AUTH_ECR_REPOSITORY }}:${{ github.sha }}
        echo "image=$ECR_REGISTRY/${{ env.AUTH_ECR_REPOSITORY }}:${{ github.sha }}" >> $GITHUB_OUTPUT

    - name: Fill in the new auth image ID in the Amazon ECS task definition
      id: auth-task-def
      uses: aws-actions/amazon-ecs-render-task-definition@v1
      with:
        task-definition: ${{ env.AUTH_ECS_TASK_DEFINITION }}
        container-name: ${{ env.AUTH_CONTAINER_NAME }}
        image: ${{ steps.auth-build-image.outputs.image }}
        environment-variables: |
          EUREKA_DNS_NAME=${{ secrets.EUREKA_DNS_NAME }}
          CONFIG_DNS_NAME=${{ secrets.CONFIG_DNS_NAME }}
          GATEWAY_DNS_NAME=${{ secrets.GATEWAY_DNS_NAME }}
          AUTH_DNS_NAME=${{ secrets.AUTH_DNS_NAME }}
          TRIAL_DNS_NAME=${{ secrets.TRIAL_DNS_NAME }}
          PRODUCT_DNS_NAME=${{ secrets.PRODUCT_DNS_NAME }}
          REVIEW_DNS_NAME=${{ secrets.REVIEW_DNS_NAME }}
          NOTIFICATION_DNS_NAME=${{ secrets.NOTIFICATION_DNS_NAME }}
          STATISTICS_DNS_NAME=${{ secrets.STATISTICS_DNS_NAME }}
          IMAGE_MANAGE_DNS_NAME=${{ secrets.IMAGE_MANAGE_DNS_NAME }}
          DB_URL=${{ secrets.DB_URL }}
          DB_AUTH_USERNAME=${{ secrets.DB_AUTH_USERNAME }}
          DB_AUTH_PASSWORD=${{ secrets.DB_AUTH_PASSWORD }}
          SECRET_KEY=${{ secrets.SECRET_KEY }}
          ZIPKIN_URL=${{ secrets.ZIPKIN_URL }}
          KAFKA_DNS_URL=${{ secrets.KAFKA_DNS_URL }}

    - name: Deploy auth Amazon ECS task definition
      uses: aws-actions/amazon-ecs-deploy-task-definition@v2
      with:
        task-definition: ${{ steps.auth-task-def.outputs.task-definition }}
        service: ${{ env.AUTH_ECS_SERVICE }}
        cluster: ${{ env.AUTH_ECS_CLUSTER }}
        wait-for-service-stability: true

    # Trial
    - name: Trial - Build, tag, and push image to Amazon ECR
      id: trial-build-image
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        IMAGE_TAG: ${{ github.sha }}
      run: |
        # Build a docker container and
        # push it to ECR so that it can
        # be deployed to ECS.
        docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG ${{ env.TRIAL_WD }}
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
        echo "image=$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG" >> $GITHUB_OUTPUT

    - name: Fill in the new trial image ID in the Amazon ECS task definition
      id: trial-task-def
      uses: aws-actions/amazon-ecs-render-task-definition@v1
      with:
        task-definition: ${{ env.ECS_TASK_DEFINITION }}
        container-name: ${{ env.CONTAINER_NAME }}
        image: ${{ steps.trial-build-image.outputs.image }}
        environment-variables: |
          EUREKA_DNS_NAME=${{ secrets.EUREKA_DNS_NAME }}
          CONFIG_DNS_NAME=${{ secrets.CONFIG_DNS_NAME }}
          GATEWAY_DNS_NAME=${{ secrets.GATEWAY_DNS_NAME }}
          AUTH_DNS_NAME=${{ secrets.AUTH_DNS_NAME }}
          TRIAL_DNS_NAME=${{ secrets.TRIAL_DNS_NAME }}
          PRODUCT_DNS_NAME=${{ secrets.PRODUCT_DNS_NAME }}
          REVIEW_DNS_NAME=${{ secrets.REVIEW_DNS_NAME }}
          NOTIFICATION_DNS_NAME=${{ secrets.NOTIFICATION_DNS_NAME }}
          STATISTICS_DNS_NAME=${{ secrets.STATISTICS_DNS_NAME }}
          IMAGE_MANAGE_DNS_NAME=${{ secrets.IMAGE_MANAGE_DNS_NAME }}
          DB_URL=${{ secrets.DB_URL }}
          DB_RECRUITMENT_USERNAME=${{ secrets.DB_RECRUITMENT_USERNAME }}
          DB_RECRUITMENT_PASSWORD=${{ secrets.DB_RECRUITMENT_PASSWORD }}
          RECRUITMENT_REDIS_HOST=${{ secrets.RECRUITMENT_REDIS_HOST }}
          RECRUITMENT_REDIS_PORT=${{ secrets.RECRUITMENT_REDIS_PORT }}
          REDIS_USERNAME=${{ secrets.REDIS_USERNAME }}
          REDIS_PASSWORD=${{ secrets.REDIS_PASSWORD }}
          KAFKA_DNS_URL=${{ secrets.KAFKA_DNS_URL }}

    - name: Deploy trial Amazon ECS task definition
      uses: aws-actions/amazon-ecs-deploy-task-definition@v2
      with:
        task-definition: ${{ steps.trial-task-def.outputs.task-definition }}
        service: ${{ env.ECS_SERVICE }}
        cluster: ${{ env.ECS_CLUSTER }}
        wait-for-service-stability: true

    # Product
    - name: Product - Build, tag, and push server image to Amazon ECR
      id: product-build-image
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        IMAGE_TAG: ${{ github.sha }}
      run: |
        docker build -t $ECR_REGISTRY/${{ env.PRODUCT_ECR_REPOSITORY }}:${{ github.sha }} ${{ env.PRODUCT_WD }}
        docker push $ECR_REGISTRY/${{ env.PRODUCT_ECR_REPOSITORY }}:${{ github.sha }}
        echo "image=$ECR_REGISTRY/${{ env.PRODUCT_ECR_REPOSITORY }}:${{ github.sha }}" >> $GITHUB_OUTPUT

    - name: Fill in the new product image ID in the Amazon ECS task definition
      id: product-task-def
      uses: aws-actions/amazon-ecs-render-task-definition@v1
      with:
        task-definition: ${{ env.PRODUCT_ECS_TASK_DEFINITION }}
        container-name: ${{ env.PRODUCT_CONTAINER_NAME }}
        image: ${{ steps.product-build-image.outputs.image }}
        environment-variables: |
          EUREKA_DNS_NAME=${{ secrets.EUREKA_DNS_NAME }}
          CONFIG_DNS_NAME=${{ secrets.CONFIG_DNS_NAME }}
          GATEWAY_DNS_NAME=${{ secrets.GATEWAY_DNS_NAME }}
          AUTH_DNS_NAME=${{ secrets.AUTH_DNS_NAME }}
          TRIAL_DNS_NAME=${{ secrets.TRIAL_DNS_NAME }}
          PRODUCT_DNS_NAME=${{ secrets.PRODUCT_DNS_NAME }}
          REVIEW_DNS_NAME=${{ secrets.REVIEW_DNS_NAME }}
          NOTIFICATION_DNS_NAME=${{ secrets.NOTIFICATION_DNS_NAME }}
          STATISTICS_DNS_NAME=${{ secrets.STATISTICS_DNS_NAME }}
          IMAGE_MANAGE_DNS_NAME=${{ secrets.IMAGE_MANAGE_DNS_NAME }}
          DB_URL=${{ secrets.DB_URL }}
          DB_PRODUCT_USERNAME=${{ secrets.DB_PRODUCT_USERNAME }}
          DB_PRODUCT_PASSWORD=${{ secrets.DB_PRODUCT_PASSWORD }}
          PRODUCT_REDIS_HOST=${{ secrets.PRODUCT_REDIS_HOST }}
          PRODUCT_REDIS_PORT=${{ secrets.PRODUCT_REDIS_PORT }}
          REDIS_USERNAME=${{ secrets.REDIS_USERNAME }}
          REDIS_PASSWORD=${{ secrets.REDIS_PASSWORD }}
          ZIPKIN_URL=${{ secrets.ZIPKIN_URL }}
          KAFKA_DNS_URL=${{ secrets.KAFKA_DNS_URL }}

    - name: Deploy product Amazon ECS task definition
      uses: aws-actions/amazon-ecs-deploy-task-definition@v2
      with:
        task-definition: ${{ steps.product-task-def.outputs.task-definition }}
        service: ${{ env.PRODUCT_ECS_SERVICE }}
        cluster: ${{ env.PRODUCT_ECS_CLUSTER }}
        wait-for-service-stability: true

    # Review
    - name: Review - Build, tag, and push server image to Amazon ECR
      id: review-build-image
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        IMAGE_TAG: ${{ github.sha }}
      run: |
        docker build -t $ECR_REGISTRY/${{ env.REVIEW_ECR_REPOSITORY }}:${{ github.sha }} ${{ env.REVIEW_WD }}
        docker push $ECR_REGISTRY/${{ env.REVIEW_ECR_REPOSITORY }}:${{ github.sha }}
        echo "image=$ECR_REGISTRY/${{ env.REVIEW_ECR_REPOSITORY }}:${{ github.sha }}" >> $GITHUB_OUTPUT

    - name: Fill in the new review image ID in the Amazon ECS task definition
      id: review-task-def
      uses: aws-actions/amazon-ecs-render-task-definition@v1
      with:
        task-definition: ${{ env.REVIEW_ECS_TASK_DEFINITION }}
        container-name: ${{ env.REVIEW_CONTAINER_NAME }}
        image: ${{ steps.review-build-image.outputs.image }}
        environment-variables: |
          EUREKA_DNS_NAME=${{ secrets.EUREKA_DNS_NAME }}
          CONFIG_DNS_NAME=${{ secrets.CONFIG_DNS_NAME }}
          GATEWAY_DNS_NAME=${{ secrets.GATEWAY_DNS_NAME }}
          AUTH_DNS_NAME=${{ secrets.AUTH_DNS_NAME }}
          TRIAL_DNS_NAME=${{ secrets.TRIAL_DNS_NAME }}
          PRODUCT_DNS_NAME=${{ secrets.PRODUCT_DNS_NAME }}
          REVIEW_DNS_NAME=${{ secrets.REVIEW_DNS_NAME }}
          NOTIFICATION_DNS_NAME=${{ secrets.NOTIFICATION_DNS_NAME }}
          STATISTICS_DNS_NAME=${{ secrets.STATISTICS_DNS_NAME }}
          IMAGE_MANAGE_DNS_NAME=${{ secrets.IMAGE_MANAGE_DNS_NAME }}
          DB_URL=${{ secrets.DB_URL }}
          DB_REVIEW_USERNAME=${{ secrets.DB_REVIEW_USERNAME }}
          DB_REVIEW_PASSWORD=${{ secrets.DB_REVIEW_PASSWORD }}
          REVIEW_REDIS_HOST=${{ secrets.REVIEW_REDIS_HOST }}
          REVIEW_REDIS_PORT=${{ secrets.REVIEW_REDIS_PORT }}
          REDIS_USERNAME=${{ secrets.REDIS_USERNAME }}
          REDIS_PASSWORD=${{ secrets.REDIS_PASSWORD }}
          ZIPKIN_URL=${{ secrets.ZIPKIN_URL }}
          KAFKA_DNS_URL=${{ secrets.KAFKA_DNS_URL }}

    - name: Deploy review Amazon ECS task definition
      uses: aws-actions/amazon-ecs-deploy-task-definition@v2
      with:
        task-definition: ${{ steps.review-task-def.outputs.task-definition }}
        service: ${{ env.REVIEW_ECS_SERVICE }}
        cluster: ${{ env.REVIEW_ECS_CLUSTER }}
        wait-for-service-stability: true

    # Notification
    - name: Notification - Build, tag, and push server image to Amazon ECR
      id: notification-build-image
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        IMAGE_TAG: ${{ github.sha }}
      run: |
        docker build -t $ECR_REGISTRY/${{ env.NOTIFICATION_ECR_REPOSITORY }}:${{ github.sha }} ${{ env.NOTIFICATION_WD }}
        docker push $ECR_REGISTRY/${{ env.NOTIFICATION_ECR_REPOSITORY }}:${{ github.sha }}
        echo "image=$ECR_REGISTRY/${{ env.NOTIFICATION_ECR_REPOSITORY }}:${{ github.sha }}" >> $GITHUB_OUTPUT

    - name: Fill in the new notification image ID in the Amazon ECS task definition
      id: notification-task-def
      uses: aws-actions/amazon-ecs-render-task-definition@v1
      with:
        task-definition: ${{ env.NOTIFICATION_ECS_TASK_DEFINITION }}
        container-name: ${{ env.NOTIFICATION_CONTAINER_NAME }}
        image: ${{ steps.notification-build-image.outputs.image }}
        environment-variables: |
          EUREKA_DNS_NAME=${{ secrets.EUREKA_DNS_NAME }}
          CONFIG_DNS_NAME=${{ secrets.CONFIG_DNS_NAME }}
          GATEWAY_DNS_NAME=${{ secrets.GATEWAY_DNS_NAME }}
          AUTH_DNS_NAME=${{ secrets.AUTH_DNS_NAME }}
          TRIAL_DNS_NAME=${{ secrets.TRIAL_DNS_NAME }}
          PRODUCT_DNS_NAME=${{ secrets.PRODUCT_DNS_NAME }}
          REVIEW_DNS_NAME=${{ secrets.REVIEW_DNS_NAME }}
          NOTIFICATION_DNS_NAME=${{ secrets.NOTIFICATION_DNS_NAME }}
          STATISTICS_DNS_NAME=${{ secrets.STATISTICS_DNS_NAME }}
          IMAGE_MANAGE_DNS_NAME=${{ secrets.IMAGE_MANAGE_DNS_NAME }}
          ZIPKIN_URL=${{ secrets.ZIPKIN_URL }}
          DB_URL=${{ secrets.DB_URL }}
          DB_NOTIFICATION_USERNAME=${{ secrets.DB_NOTIFICATION_USERNAME }}
          DB_NOTIFICATION_PASSWORD=${{ secrets.DB_NOTIFICATION_PASSWORD }}
          SLACK_WEBHOOK_URL=${{ secrets.SLACK_WEBHOOK_URL }}
          KAFKA_DNS_URL=${{ secrets.KAFKA_DNS_URL }}

    - name: Deploy notification Amazon ECS task definition
      uses: aws-actions/amazon-ecs-deploy-task-definition@v2
      with:
        task-definition: ${{ steps.notification-task-def.outputs.task-definition }}
        service: ${{ env.NOTIFICATION_ECS_SERVICE }}
        cluster: ${{ env.NOTIFICATION_ECS_CLUSTER }}
        wait-for-service-stability: true

    # Statistics
    - name: Statistics - Build, tag, and push server image to Amazon ECR
      id: statistics-build-image
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        IMAGE_TAG: ${{ github.sha }}
      run: |
        docker build -t $ECR_REGISTRY/${{ env.STATISTICS_ECR_REPOSITORY }}:${{ github.sha }} ${{ env.STATISTICS_WD }}
        docker push $ECR_REGISTRY/${{ env.STATISTICS_ECR_REPOSITORY }}:${{ github.sha }}
        echo "image=$ECR_REGISTRY/${{ env.STATISTICS_ECR_REPOSITORY }}:${{ github.sha }}" >> $GITHUB_OUTPUT

    - name: Fill in the new statistics image ID in the Amazon ECS task definition
      id: statistics-task-def
      uses: aws-actions/amazon-ecs-render-task-definition@v1
      with:
        task-definition: ${{ env.STATISTICS_ECS_TASK_DEFINITION }}
        container-name: ${{ env.STATISTICS_CONTAINER_NAME }}
        image: ${{ steps.statistics-build-image.outputs.image }}
        environment-variables: |
          EUREKA_DNS_NAME=${{ secrets.EUREKA_DNS_NAME }}
          CONFIG_DNS_NAME=${{ secrets.CONFIG_DNS_NAME }}
          GATEWAY_DNS_NAME=${{ secrets.GATEWAY_DNS_NAME }}
          AUTH_DNS_NAME=${{ secrets.AUTH_DNS_NAME }}
          TRIAL_DNS_NAME=${{ secrets.TRIAL_DNS_NAME }}
          PRODUCT_DNS_NAME=${{ secrets.PRODUCT_DNS_NAME }}
          REVIEW_DNS_NAME=${{ secrets.REVIEW_DNS_NAME }}
          NOTIFICATION_DNS_NAME=${{ secrets.NOTIFICATION_DNS_NAME }}
          STATISTICS_DNS_NAME=${{ secrets.STATISTICS_DNS_NAME }}
          IMAGE_MANAGE_DNS_NAME=${{ secrets.IMAGE_MANAGE_DNS_NAME }}
          DB_URL=${{ secrets.DB_URL }}
          DB_STATISTICS_USERNAME=${{ secrets.DB_STATISTICS_USERNAME }}
          DB_STATISTICS_PASSWORD=${{ secrets.DB_STATISTICS_PASSWORD }}
          STATISTICS_REDIS_HOST=${{ secrets.STATISTICS_REDIS_HOST }}
          STATISTICS_REDIS_PORT=${{ secrets.STATISTICS_REDIS_PORT }}
          REDIS_USERNAME=${{ secrets.REDIS_USERNAME }}
          REDIS_PASSWORD=${{ secrets.REDIS_PASSWORD }}
          ZIPKIN_URL=${{ secrets.ZIPKIN_URL }}
          KAFKA_DNS_URL=${{ secrets.KAFKA_DNS_URL }}

    - name: Deploy statistics Amazon ECS task definition
      uses: aws-actions/amazon-ecs-deploy-task-definition@v2
      with:
        task-definition: ${{ steps.statistics-task-def.outputs.task-definition }}
        service: ${{ env.STATISTICS_ECS_SERVICE }}
        cluster: ${{ env.STATISTICS_ECS_CLUSTER }}
        wait-for-service-stability: true

    # Image-manage
    - name: Image-manage - Build, tag, and push server image to Amazon ECR
      id: image-manage-build-image
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        IMAGE_TAG: ${{ github.sha }}
      run: |
        docker build -t $ECR_REGISTRY/${{ env.IMAGE_MANAGE_ECR_REPOSITORY }}:${{ github.sha }} ${{ env.IMAGE_MANAGE_WD }}
        docker push $ECR_REGISTRY/${{ env.IMAGE_MANAGE_ECR_REPOSITORY }}:${{ github.sha }}
        echo "image=$ECR_REGISTRY/${{ env.IMAGE_MANAGE_ECR_REPOSITORY }}:${{ github.sha }}" >> $GITHUB_OUTPUT

    - name: Fill in the new image-manage image ID in the Amazon ECS task definition
      id: image-manage-task-def
      uses: aws-actions/amazon-ecs-render-task-definition@v1
      with:
        task-definition: ${{ env.IMAGE_MANAGE_ECS_TASK_DEFINITION }}
        container-name: ${{ env.IMAGE_MANAGE_CONTAINER_NAME }}
        image: ${{ steps.image-manage-build-image.outputs.image }}
        environment-variables: |
          EUREKA_DNS_NAME=${{ secrets.EUREKA_DNS_NAME }}
          CONFIG_DNS_NAME=${{ secrets.CONFIG_DNS_NAME }}
          GATEWAY_DNS_NAME=${{ secrets.GATEWAY_DNS_NAME }}
          AUTH_DNS_NAME=${{ secrets.AUTH_DNS_NAME }}
          TRIAL_DNS_NAME=${{ secrets.TRIAL_DNS_NAME }}
          PRODUCT_DNS_NAME=${{ secrets.PRODUCT_DNS_NAME }}
          REVIEW_DNS_NAME=${{ secrets.REVIEW_DNS_NAME }}
          NOTIFICATION_DNS_NAME=${{ secrets.NOTIFICATION_DNS_NAME }}
          STATISTICS_DNS_NAME=${{ secrets.STATISTICS_DNS_NAME }}
          IMAGE_MANAGE_DNS_NAME=${{ secrets.IMAGE_MANAGE_DNS_NAME }}
          DB_URL=${{ secrets.DB_URL }}
          DB_PRODUCT_USERNAME=${{ secrets.DB_PRODUCT_USERNAME }}
          DB_PRODUCT_PASSWORD=${{ secrets.DB_PRODUCT_PASSWORD }}
          AWS_S3_BUCKET_NAME=${{ secrets.AWS_S3_BUCKET_NAME }}
          AWS_S3_REGION=${{ secrets.AWS_S3_REGION }}
          AWS_S3_ACCESS_KEY=${{ secrets.AWS_S3_ACCESS_KEY }}
          AWS_S3_SECRET_KEY=${{ secrets.AWS_S3_SECRET_KEY }}
          ZIPKIN_URL=${{ secrets.ZIPKIN_URL }}
          KAFKA_DNS_URL=${{ secrets.KAFKA_DNS_URL }}

    - name: Deploy image-manage Amazon ECS task definition
      uses: aws-actions/amazon-ecs-deploy-task-definition@v2
      with:
        task-definition: ${{ steps.image-manage-task-def.outputs.task-definition }}
        service: ${{ env.IMAGE_MANAGE_ECS_SERVICE }}
        cluster: ${{ env.IMAGE_MANAGE_ECS_CLUSTER }}
        wait-for-service-stability: true
