# This workflow will build and push a new container image to Amazon ECR,
# and then will deploy a new task definition to Amazon ECS, when there is a push to the "main" branch.
#
# To use this workflow, you will need to complete the following set-up steps:
#
# 1. Create an ECR repository to store your images.
#    For example: `aws ecr create-repository --repository-name my-ecr-repo --region us-east-2`.
#    Replace the value of the `ECR_REPOSITORY` environment variable in the workflow below with your repository's name.
#    Replace the value of the `AWS_REGION` environment variable in the workflow below with your repository's region.
#
# 2. Create an ECS task definition, an ECS cluster, and an ECS service.
#    For example, follow the Getting Started guide on the ECS console:
#      https://us-east-2.console.aws.amazon.com/ecs/home?region=us-east-2#/firstRun
#    Replace the value of the `ECS_SERVICE` environment variable in the workflow below with the name you set for the Amazon ECS service.
#    Replace the value of the `ECS_CLUSTER` environment variable in the workflow below with the name you set for the cluster.
#
# 3. Store your ECS task definition as a JSON file in your repository.
#    The format should follow the output of `aws ecs register-task-definition --generate-cli-skeleton`.
#    Replace the value of the `ECS_TASK_DEFINITION` environment variable in the workflow below with the path to the JSON file.
#    Replace the value of the `CONTAINER_NAME` environment variable in the workflow below with the name of the container
#    in the `containerDefinitions` section of the task definition.
#
# 4. Store an IAM user access key in GitHub Actions secrets named `AWS_ACCESS_KEY_ID` and `AWS_SECRET_ACCESS_KEY`.
#    See the documentation for each action used below for the recommended IAM policies for this IAM user,
#    and best practices on handling the access key credentials.

name: Deploy to Amazon ECS

on:
  push:
    branches: [ "develop" ]
    #branches: [ "develop" ] #branches: [ "main" ]

env:
  AWS_REGION: ap-northeast-2                  # set this to your preferred AWS region, e.g. us-west-1

  # Auth
  AUTH_ECR_REPOSITORY: here-trillionaires/try-and-review/auth      # set this to your Amazon ECR repository name
  AUTH_ECS_SERVICE: auth-service                 # set this to your Amazon ECS service name
  AUTH_ECS_CLUSTER: auth-cluster                # set this to your Amazon ECS cluster name
  AUTH_ECS_TASK_DEFINITION: .github/workflows/auth-task-revision1.json # set this to the path to your Amazon ECS task definition
  # file, e.g. .aws/task-definition.json
  AUTH_CONTAINER_NAME: auth-container           # set this to the name of the container in the
  # containerDefinitions section of your task definition
  AUTH_WD: ./com.trillionares.tryit.auth

  # trial
  TRIAL_ECR_REPOSITORY: here-trillionaires/try-and-review/trial        # set this to your Amazon ECR repository name
  TRIAL_ECS_SERVICE: trial-service                 # set this to your Amazon ECS service name
  TRIAL_ECS_CLUSTER: trial-cluster                # set this to your Amazon ECS cluster name
  TRIAL_ECS_TASK_DEFINITION: .github/workflows/trial-task-revision1.json # set this to the path to your Amazon ECS task definition
  # file, e.g. .aws/task-definition.json
  TRIAL_CONTAINER_NAME: tiral-container           # set this to the name of the container in the
  # containerDefinitions section of your task definition
  TRIAL_WD: ./com.trillionares.tryit.trial

  # Product
  PRODUCT_ECR_REPOSITORY: here-trillionaires/try-and-review/product      # set this to your Amazon ECR repository name
  PRODUCT_ECS_SERVICE: product-service                 # set this to your Amazon ECS service name
  PRODUCT_ECS_CLUSTER: product-cluster                # set this to your Amazon ECS cluster name
  PRODUCT_ECS_TASK_DEFINITION: .github/workflows/product-task-revision1.json # set this to the path to your Amazon ECS task definition
  # file, e.g. .aws/task-definition.json
  PRODUCT_CONTAINER_NAME: product-container           # set this to the name of the container in the
  # containerDefinitions section of your task definition
  PRODUCT_WD: ./com.trillionares.tryit.product

  # Review
  REVIEW_ECR_REPOSITORY: here-trillionaires/try-and-review/review      # set this to your Amazon ECR repository name
  REVIEW_ECS_SERVICE: review-service                 # set this to your Amazon ECS service name
  REVIEW_ECS_CLUSTER: review-cluster                # set this to your Amazon ECS cluster name
  REVIEW_ECS_TASK_DEFINITION: .github/workflows/review-task-revision1.json # set this to the path to your Amazon ECS task definition
  # file, e.g. .aws/task-definition.json
  REVIEW_CONTAINER_NAME: review-container           # set this to the name of the container in the
  # containerDefinitions section of your task definition
  REVIEW_WD: ./com.trillionares.tryit.review

  # Notification
  NOTIFICATION_ECR_REPOSITORY: here-trillionaires/try-and-review/notification      # set this to your Amazon ECR repository name
  NOTIFICATION_ECS_SERVICE: notification-service                 # set this to your Amazon ECS service name
  NOTIFICATION_ECS_CLUSTER: notification-cluster                # set this to your Amazon ECS cluster name
  NOTIFICATION_ECS_TASK_DEFINITION: .github/workflows/notification-task-revision1.json # set this to the path to your Amazon ECS task definition
  # file, e.g. .aws/task-definition.json
  NOTIFICATION_CONTAINER_NAME: notification-container           # set this to the name of the container in the
  # containerDefinitions section of your task definition
  NOTIFICATION_WD: ./com.trillionares.tryit.notification

  # Statistics
  STATISTICS_ECR_REPOSITORY: here-trillionaires/try-and-review/statistics      # set this to your Amazon ECR repository name
  STATISTICS_ECS_SERVICE: statistics-service                 # set this to your Amazon ECS service name
  STATISTICS_ECS_CLUSTER: statistics-cluster                # set this to your Amazon ECS cluster name
  STATISTICS_ECS_TASK_DEFINITION: .github/workflows/statistics-task-revision1.json # set this to the path to your Amazon ECS task definition
  # file, e.g. .aws/task-definition.json
  STATISTICS_CONTAINER_NAME: statistics-container           # set this to the name of the container in the
  # containerDefinitions section of your task definition
  STATISTICS_WD: ./com.trillionares.tryit.statistics

  # Image-manage
  IMAGE_MANAGE_ECR_REPOSITORY: here-trillionaires/try-and-review/image-manage      # set this to your Amazon ECR repository name
  IMAGE_MANAGE_ECS_SERVICE: image-manage-service                 # set this to your Amazon ECS service name
  IMAGE_MANAGE_ECS_CLUSTER: image-manage-cluster                # set this to your Amazon ECS cluster name
  IMAGE_MANAGE_ECS_TASK_DEFINITION: .github/workflows/image-manage-task-revision1.json # set this to the path to your Amazon ECS task definition
  # file, e.g. .aws/task-definition.json
  IMAGE_MANAGE_CONTAINER_NAME: image-manage-container           # set this to the name of the container in the
  # containerDefinitions section of your task definition
  IMAGE_MANAGE_WD: ./com.trillionares.tryit.image-manage

  # config
  CONFIG_ECR_REPOSITORY: here-trillionaires/try-and-review/config      # set this to your Amazon ECR repository name
  CONFIG_ECS_SERVICE: config-service                 # set this to your Amazon ECS service name
  CONFIG_ECS_CLUSTER: config-cluster                # set this to your Amazon ECS cluster name
  CONFIG_ECS_TASK_DEFINITION: .github/workflows/config-task-revision1.json # set this to the path to your Amazon ECS task definition
  # file, e.g. .aws/task-definition.json
  CONFIG_CONTAINER_NAME: config-container           # set this to the name of the container in the
  # containerDefinitions section of your task definition
  CONFIG_WD: ./com.trillionares.tryit.config

  # server
  SERVER_ECR_REPOSITORY: here-trillionaires/try-and-review/server      # set this to your Amazon ECR repository name
  SERVER_ECS_SERVICE: server-service                 # set this to your Amazon ECS service name
  SERVER_ECS_CLUSTER: server-cluster                # set this to your Amazon ECS cluster name
  SERVER_ECS_TASK_DEFINITION: .github/workflows/server-task-revision1.json # set this to the path to your Amazon ECS task definition
  # file, e.g. .aws/task-definition.json
  SERVER_CONTAINER_NAME: server-container           # set this to the name of the container in the
  # containerDefinitions section of your task definition
  SERVER_WD: ./com.trillionares.tryit.server

  # Gateway
  GATEWAY_ECR_REPOSITORY: here-trillionaires/try-and-review/gateway      # set this to your Amazon ECR repository name
  GATEWAY_ECS_SERVICE: gateway-service                 # set this to your Amazon ECS service name
  GATEWAY_ECS_CLUSTER: gateway-cluster                # set this to your Amazon ECS cluster name
  GATEWAY_ECS_TASK_DEFINITION: .github/workflows/gateway-task-revision1.json # set this to the path to your Amazon ECS task definition
  # file, e.g. .aws/task-definition.json
  GATEWAY_CONTAINER_NAME: gateway-container           # set this to the name of the container in the
  # containerDefinitions section of your task definition
  GATEWAY_WD: ./com.trillionares.tryit.gateway

permissions:
  contents: read

jobs:
  build-and-deploy:
    name: Build and Deploy Services
    runs-on: ubuntu-latest
    strategy:
      matrix:
        service: [
          { name: "server", wd: "${{ env.SERVER_WD }}", ecr_repository: "${{ env.SERVER_ECR_REPOSITORY }}", ecs_service: "${{ env.SERVER_ECS_SERVICE }}", ecs_cluster: "${{ env.SERVER_ECS_CLUSTER }}", ecs_task_definition: "${{ env.SERVER_ECS_TASK_DEFINITION }}", container_name: "${{ env.SERVER_CONTAINER_NAME }}" },
          { name: "config", wd: "${{ env.CONFIG_WD }}", ecr_repository: "${{ env.CONFIG_ECR_REPOSITORY }}", ecs_service: "${{ env.CONFIG_ECS_SERVICE }}", ecs_cluster: "${{ env.CONFIG_ECS_CLUSTER }}", ecs_task_definition: "${{ env.CONFIG_ECS_TASK_DEFINITION }}", container_name: "${{ env.CONFIG_CONTAINER_NAME }}" },
          { name: "gateway", wd: "${{ env.GATEWAY_WD }}", ecr_repository: "${{ env.GATEWAY_ECR_REPOSITORY }}", ecs_service: "${{ env.GATEWAY_ECS_SERVICE }}", ecs_cluster: "${{ env.GATEWAY_ECS_CLUSTER }}", ecs_task_definition: "${{ env.GATEWAY_ECS_TASK_DEFINITION }}", container_name: "${{ env.GATEWAY_CONTAINER_NAME }}" },
          { name: "auth", wd: "${{ env.AUTH_WD }}", ecr_repository: "${{ env.AUTH_ECR_REPOSITORY }}", ecs_service: "${{ env.AUTH_ECS_SERVICE }}", ecs_cluster: "${{ env.AUTH_ECS_CLUSTER }}", ecs_task_definition: "${{ env.AUTH_ECS_TASK_DEFINITION }}", container_name: "${{ env.AUTH_CONTAINER_NAME }}" },
          { name: "trial", wd: "${{ env.TRIAL_WD }}", ecr_repository: "${{ env.TRIAL_ECR_REPOSITORY }}", ecs_service: "${{ env.TRIAL_ECS_SERVICE }}", ecs_cluster: "${{ env.TRIAL_ECS_CLUSTER }}", ecs_task_definition: "${{ env.TRIAL_ECS_TASK_DEFINITION }}", container_name: "${{ env.TRIAL_CONTAINER_NAME }}" },
          { name: "product", wd: "${{ env.PRODUCT_WD }}", ecr_repository: "${{ env.PRODUCT_ECR_REPOSITORY }}", ecs_service: "${{ env.PRODUCT_ECS_SERVICE }}", ecs_cluster: "${{ env.PRODUCT_ECS_CLUSTER }}", ecs_task_definition: "${{ env.PRODUCT_ECS_TASK_DEFINITION }}", container_name: "${{ env.PRODUCT_CONTAINER_NAME }}" },
          { name: "review", wd: "${{ env.REVIEW_WD }}", ecr_repository: "${{ env.REVIEW_ECR_REPOSITORY }}", ecs_service: "${{ env.REVIEW_ECS_SERVICE }}", ecs_cluster: "${{ env.REVIEW_ECS_CLUSTER }}", ecs_task_definition: "${{ env.REVIEW_ECS_TASK_DEFINITION }}", container_name: "${{ env.REVIEW_CONTAINER_NAME }}" },
          { name: "notification", wd: "${{ env.NOTIFICATION_WD }}", ecr_repository: "${{ env.NOTIFICATION_ECR_REPOSITORY }}", ecs_service: "${{ env.NOTIFICATION_ECS_SERVICE }}", ecs_cluster: "${{ env.NOTIFICATION_ECS_CLUSTER }}", ecs_task_definition: "${{ env.NOTIFICATION_ECS_TASK_DEFINITION }}", container_name: "${{ env.NOTIFICATION_CONTAINER_NAME }}" },
          { name: "statistics", wd: "${{ env.STATISTICS_WD }}", ecr_repository: "${{ env.STATISTICS_ECR_REPOSITORY }}", ecs_service: "${{ env.STATISTICS_ECS_SERVICE }}", ecs_cluster: "${{ env.STATISTICS_ECS_CLUSTER }}", ecs_task_definition: "${{ env.STATISTICS_ECS_TASK_DEFINITION }}", container_name: "${{ env.STATISTICS_CONTAINER_NAME }}" },
          { name: "image-manage", wd: "${{ env.IMAGE_MANAGE_WD }}", ecr_repository: "${{ env.IMAGE_MANAGE_ECR_REPOSITORY }}", ecs_service: "${{ env.IMAGE_MANAGE_ECS_SERVICE }}", ecs_cluster: "${{ env.IMAGE_MANAGE_ECS_CLUSTER }}", ecs_task_definition: "${{ env.IMAGE_MANAGE_ECS_TASK_DEFINITION }}", container_name: "${{ env.IMAGE_MANAGE_CONTAINER_NAME }}" }
        ]
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'

      - name: Grant execute permission for gradlew
        run: chmod +x gradlew
        working-directory: ${{ matrix.service.wd }}

      - name: Build with Gradle
        run: ./gradlew clean build -x test
        working-directory: ${{ matrix.service.wd }}

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ap-northeast-2

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Build, tag, and push image to Amazon ECR
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          IMAGE_TAG: ${{ github.sha }}
        run: |
          docker build -t $ECR_REGISTRY/${{ matrix.service.ecr_repository }}:${{ github.sha }} ${{ matrix.service.wd }}
          docker push $ECR_REGISTRY/${{ matrix.service.ecr_repository }}:${{ github.sha }}

      - name: Fill in the new image ID in the Amazon ECS task definition
        id: render-task-definition
        uses: aws-actions/amazon-ecs-render-task-definition@v1
        with:
          task-definition: ${{ matrix.service.ecs_task_definition }}
          container-name: ${{ matrix.service.container_name }}
          image: ${{ steps.login-ecr.outputs.registry }}/${{ matrix.service.ecr_repository }}:${{ github.sha }}
          environment-variables: |
            EUREKA_DNS_NAME=${{ secrets.EUREKA_DNS_NAME }}
            CONFIG_DNS_NAME=${{ secrets.CONFIG_DNS_NAME }}
            GATEWAY_DNS_NAME=${{ secrets.GATEWAY_DNS_NAME }}
            AUTH_DNS_NAME=${{ secrets.AUTH_DNS_NAME }}
            TRIAL_DNS_NAME=${{ secrets.TRIAL_DNS_NAME }}
            PRODUCT_DNS_NAME=${{ secrets.PRODUCT_DNS_NAME }}
            REVIEW_DNS_NAME=${{ secrets.REVIEW_DNS_NAME }}
            NOTIFICATION_DNS_NAME=${{ secrets.NOTIFICATION_DNS_NAME }}
            STATISTICS_DNS_NAME=${{ secrets.STATISTICS_DNS_NAME }}
            IMAGE_MANAGE_DNS_NAME=${{ secrets.IMAGE_MANAGE_DNS_NAME }}
            DB_URL=${{ secrets.DB_URL }}
            DB_AUTH_USERNAME=${{ secrets.DB_AUTH_USERNAME }}
            DB_AUTH_PASSWORD=${{ secrets.DB_AUTH_PASSWORD }}
            DB_RECRUITMENT_USERNAME=${{ secrets.DB_RECRUITMENT_USERNAME }}
            DB_RECRUITMENT_PASSWORD=${{ secrets.DB_RECRUITMENT_PASSWORD }}
            DB_PRODUCT_USERNAME=${{ secrets.DB_PRODUCT_USERNAME }}
            DB_PRODUCT_PASSWORD=${{ secrets.DB_PRODUCT_PASSWORD }}
            DB_REVIEW_USERNAME=${{ secrets.DB_REVIEW_USERNAME }}
            DB_REVIEW_PASSWORD=${{ secrets.DB_REVIEW_PASSWORD }}
            DB_NOTIFICATION_USERNAME=${{ secrets.DB_NOTIFICATION_USERNAME }}
            DB_NOTIFICATION_PASSWORD=${{ secrets.DB_NOTIFICATION_PASSWORD }}
            DB_STATISTICS_USERNAME=${{ secrets.DB_STATISTICS_USERNAME }}
            DB_STATISTICS_PASSWORD=${{ secrets.DB_STATISTICS_PASSWORD }}
            AUTH_REDIS_HOST=${{ secrets.AUTH_REDIS_HOST }}
            AUTH_REDIS_PORT=${{ secrets.AUTH_REDIS_PORT }}
            RECRUITMENT_REDIS_HOST=${{ secrets.RECRUITMENT_REDIS_HOST }}
            RECRUITMENT_REDIS_PORT=${{ secrets.RECRUITMENT_REDIS_PORT }}
            PRODUCT_REDIS_HOST=${{ secrets.PRODUCT_REDIS_HOST }}
            PRODUCT_REDIS_PORT=${{ secrets.PRODUCT_REDIS_PORT }}
            REVIEW_REDIS_HOST=${{ secrets.REVIEW_REDIS_HOST }}
            REVIEW_REDIS_PORT=${{ secrets.REVIEW_REDIS_PORT }}
            NOTIFICATION_REDIS_HOST=${{ secrets.NOTIFICATION_REDIS_HOST }}
            NOTIFICATION_REDIS_PORT=${{ secrets.NOTIFICATION_REDIS_PORT }}
            STATISTICS_REDIS_HOST=${{ secrets.STATISTICS_REDIS_HOST }}
            STATISTICS_REDIS_PORT=${{ secrets.STATISTICS_REDIS_PORT }}
            REDIS_USERNAME=${{ secrets.REDIS_USERNAME }}
            REDIS_PASSWORD=${{ secrets.REDIS_PASSWORD }}
            AWS_S3_BUCKET_NAME=${{ secrets.AWS_S3_BUCKET_NAME }}
            AWS_S3_REGION=${{ secrets.AWS_S3_REGION }}
            AWS_S3_ACCESS_KEY=${{ secrets.AWS_S3_ACCESS_KEY }}
            AWS_S3_SECRET_KEY=${{ secrets.AWS_S3_SECRET_KEY }}
            SECRET_KEY=${{ secrets.SECRET_KEY }}
            ZIPKIN_URL=${{ secrets.ZIPKIN_URL }}
            SLACK_WEBHOOK_URL=${{ secrets.SLACK_WEBHOOK_URL }}
            KAFKA_DNS_URL=${{ secrets.KAFKA_DNS_URL }}

      - name: Deploy Amazon ECS task definition
        uses: aws-actions/amazon-ecs-deploy-task-definition@v2
        with:
          task-definition: ${{ steps.render-task-definition.outputs.task-definition }}
          service: ${{ matrix.service.ecs_service }}
          cluster: ${{ matrix.service.ecs_cluster }}
          wait-for-service-stability: true
